defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: 'circleci/openjdk:8-jdk-browsers'

node-defaults: &node-defaults
  docker:
    - image: circleci/node:10

docker-defaults: &docker-defaults
  docker:
    - image: docker:17.05.0-ce-git


version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  build-node:
    <<: *node-defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
  
      - run:
          name: Setup Dependencies
          command: npm install

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run:
          name: Run Build
          command: CI=false yarn build

      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp -R build ~/repo/build

      - store_artifacts:
          path: ~/repo/build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - build/

            
  release:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - checkout
      - run: |
          npx semantic-release --debug
           
  docker-build-push:
    <<: *docker-defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Build and Push Docker Image
          command: |
            TAG=${CIRCLE_SHA1}
             if [ "${CIRCLE_BRANCH}" == "master" ]; then
               TAG=latest
             else
               TAG=${CIRCLE_BRANCH}
             fi
             docker build -t $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$TAG .
             docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
             docker push $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$TAG

  okd:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - checkout
      - run: |
          
          
          ENV OS_CLI_VERSION v1.1.3
          ENV OS_TAG cffae05

          apk-install curl ca-certificates && \
          curl -s -L https://github.com/openshift/origin/releases/download/${OS_CLI_VERSION}/openshift-origin-client-tools-${OS_CLI_VERSION}-${OS_TAG}-linux-64bit.tar.gz -o /tmp/oc.tar.gz && \
          tar zxvf /tmp/oc.tar.gz -C /tmp/ && \ 
          mv /tmp/openshift-origin-client-tools-${OS_CLI_VERSION}-${OS_TAG}-linux-64bit/oc /usr/bin/ && \
          rm -rf /tmp/oc.tar.gz /tmp/openshift-origin-client-tools-${OS_CLI_VERSION}-${OS_TAG}-linux-64bit/ && \
          rm -rf /root/.cache /var/cache/apk/ && \
          oc version

          oc login OKD_URL --token=$OKD_TOKEN

workflows:
  version: 2
  build-and-release:
    jobs:
      - checkout_code
      - build-node:
          requires:
            - checkout_code
      - docker-build-push:
          requires:
            - build-node
      # - okd:
      #     requires:
      #       - docker-build-push

      # - release:
      #     requires:
      #       - build-node
      #     filters:
      #       branches:
      #         only: master


